#
#
# Sequence diagram description
#
# The sequence diagram description below is translated to
# a PNG image by mscgen (http://www.mcternan.me.uk/mscgen/)
# 
# Recompile updated diagrams to a png image with:
#  
#   mscgen -T png swm.msc
#

msc {
  width="1024";
  "Client",  "Server";
  "Client" -> "Server" [ label = "connect" ];  
  "Client" -> "Server" [ label = "authenticate( JWT ( client_pub_key, root_sign ) )" ];
  "Server" abox "Server" [ label = "Validate client public key signature using root public key" ] ;
  "Client" <- "Server" [ label = "authenticate( JWT ( server_pub_key, root_sign ) )" ];
  "Client" abox "Client" [ label = "Validate server public key signature using root public key" ] ;

  "Client" -> "Server" [ label = "authorize( JWT ( [JWT (certificate, root_sign), ...] ), device_sign ) )" ];
  "Server" abox "Server" [ label = "Validate authorize signature using client public key" ] ;
  "Server" abox "Server" [ label = "Validate each certificate using root public key" ] ;
  "Client" <- "Server" [ label = "authorize( JWT ( [JWT (certificate, root_sign), ...] ), device_sign ) )" ];
  "Client" abox "Client" [ label = "Validate authorize signature using client public key" ] ;
  "Client" abox "Client" [ label = "Validate each certificate using root public key" ] ;

  "Client" abox "Client" [ label = "Create list of services matching server certificates" ] ;
  "Client" -> "Server" [ label = "service_announce( [service_name, ... ])" ];
  "Server" abox "Server" [ label = "Create list of services matching client certificates" ] ;
  "Client" <- "Server" [ label = "service_announce( [service_name, ... ])" ];

  "Client" -> "Server" [ label = "message( service_name, arguments)" ];

  "Server" -> "Client" [ label = "message( service_name, arguments)" ];
}

